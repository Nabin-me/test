{"dependencies":[{"name":"tslib","loc":{"line":1,"column":25}},{"name":"./get-position","loc":{"line":2,"column":28}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TouchRecord = exports.Tracker = undefined;\n\nvar _tslib = require(\"tslib\");\n\nvar _getPosition = require(\"./get-position\");\n\nvar Tracker = /** @class */function () {\n  function Tracker(touch) {\n    this.velocityMultiplier = /Android/.test(navigator.userAgent) ? window.devicePixelRatio : 1;\n    this.updateTime = Date.now();\n    this.delta = { x: 0, y: 0 };\n    this.velocity = { x: 0, y: 0 };\n    this.lastPosition = { x: 0, y: 0 };\n    this.lastPosition = (0, _getPosition.getPosition)(touch);\n  }\n  Tracker.prototype.update = function (touch) {\n    var _a = this,\n        velocity = _a.velocity,\n        updateTime = _a.updateTime,\n        lastPosition = _a.lastPosition;\n    var now = Date.now();\n    var position = (0, _getPosition.getPosition)(touch);\n    var delta = {\n      x: -(position.x - lastPosition.x),\n      y: -(position.y - lastPosition.y)\n    };\n    var duration = now - updateTime || 16.7;\n    var vx = delta.x / duration * 16.7;\n    var vy = delta.y / duration * 16.7;\n    velocity.x = vx * this.velocityMultiplier;\n    velocity.y = vy * this.velocityMultiplier;\n    this.delta = delta;\n    this.updateTime = now;\n    this.lastPosition = position;\n  };\n  return Tracker;\n}();\nexports.Tracker = Tracker;\n\nvar TouchRecord = /** @class */function () {\n  function TouchRecord() {\n    this._touchList = {};\n  }\n  Object.defineProperty(TouchRecord.prototype, \"_primitiveValue\", {\n    get: function () {\n      return { x: 0, y: 0 };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  TouchRecord.prototype.isActive = function () {\n    return this._activeTouchID !== undefined;\n  };\n  TouchRecord.prototype.getDelta = function () {\n    var tracker = this._getActiveTracker();\n    if (!tracker) {\n      return this._primitiveValue;\n    }\n    return (0, _tslib.__assign)({}, tracker.delta);\n  };\n  TouchRecord.prototype.getVelocity = function () {\n    var tracker = this._getActiveTracker();\n    if (!tracker) {\n      return this._primitiveValue;\n    }\n    return (0, _tslib.__assign)({}, tracker.velocity);\n  };\n  TouchRecord.prototype.getEasingDistance = function (damping) {\n    var deAcceleration = 1 - damping;\n    var distance = {\n      x: 0,\n      y: 0\n    };\n    var vel = this.getVelocity();\n    Object.keys(vel).forEach(function (dir) {\n      // ignore small velocity\n      var v = Math.abs(vel[dir]) <= 10 ? 0 : vel[dir];\n      while (v !== 0) {\n        distance[dir] += v;\n        v = v * deAcceleration | 0;\n      }\n    });\n    return distance;\n  };\n  TouchRecord.prototype.track = function (evt) {\n    var _this = this;\n    var targetTouches = evt.targetTouches;\n    Array.from(targetTouches).forEach(function (touch) {\n      _this._add(touch);\n    });\n    return this._touchList;\n  };\n  TouchRecord.prototype.update = function (evt) {\n    var _this = this;\n    var touches = evt.touches,\n        changedTouches = evt.changedTouches;\n    Array.from(touches).forEach(function (touch) {\n      _this._renew(touch);\n    });\n    this._setActiveID(changedTouches);\n    return this._touchList;\n  };\n  TouchRecord.prototype.release = function (evt) {\n    var _this = this;\n    delete this._activeTouchID;\n    Array.from(evt.changedTouches).forEach(function (touch) {\n      _this._delete(touch);\n    });\n  };\n  TouchRecord.prototype._add = function (touch) {\n    if (this._has(touch)) {\n      // reset tracker\n      this._delete(touch);\n    }\n    var tracker = new Tracker(touch);\n    this._touchList[touch.identifier] = tracker;\n  };\n  TouchRecord.prototype._renew = function (touch) {\n    if (!this._has(touch)) {\n      return;\n    }\n    var tracker = this._touchList[touch.identifier];\n    tracker.update(touch);\n  };\n  TouchRecord.prototype._delete = function (touch) {\n    delete this._touchList[touch.identifier];\n  };\n  TouchRecord.prototype._has = function (touch) {\n    return this._touchList.hasOwnProperty(touch.identifier);\n  };\n  TouchRecord.prototype._setActiveID = function (touches) {\n    this._activeTouchID = touches[touches.length - 1].identifier;\n  };\n  TouchRecord.prototype._getActiveTracker = function () {\n    var _a = this,\n        _touchList = _a._touchList,\n        _activeTouchID = _a._activeTouchID;\n    return _touchList[_activeTouchID];\n  };\n  return TouchRecord;\n}();\nexports.TouchRecord = TouchRecord;\n//# sourceMappingURL=touch-record.js.map"},"hash":"d0b29d61a5dbb8058ba8f917e5ec74bd"}