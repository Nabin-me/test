{"dependencies":[{"name":"tslib","loc":{"line":1,"column":26}},{"name":"./polyfills","loc":{"line":2,"column":7}},{"name":"./scrollbar","loc":{"line":3,"column":41}},{"name":"./plugin","loc":{"line":4,"column":45}},{"name":"./style","loc":{"line":5,"column":42}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScrollbarPlugin = undefined;\n\nvar _tslib = require(\"tslib\");\n\nrequire(\"./polyfills\");\n\nvar _scrollbar = require(\"./scrollbar\");\n\nvar _plugin = require(\"./plugin\");\n\nvar _style = require(\"./style\");\n\nexports.ScrollbarPlugin = _plugin.ScrollbarPlugin;\n/**\n * cast `I.Scrollbar` to `Scrollbar` to avoid error\n *\n * `I.Scrollbar` is not assignable to `Scrollbar`:\n *     \"privateProp\" is missing in `I.Scrollbar`\n *\n * @see https://github.com/Microsoft/TypeScript/issues/2672\n */\n\nvar SmoothScrollbar = /** @class */function (_super) {\n  (0, _tslib.__extends)(SmoothScrollbar, _super);\n  function SmoothScrollbar() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Initializes a scrollbar on the given element.\n   *\n   * @param elem The DOM element that you want to initialize scrollbar to\n   * @param [options] Initial options\n   */\n  SmoothScrollbar.init = function (elem, options) {\n    if (!elem || elem.nodeType !== 1) {\n      throw new TypeError(\"expect element to be DOM Element, but got \" + elem);\n    }\n    // attach stylesheet\n    (0, _style.attachStyle)();\n    if (_scrollbar.scrollbarMap.has(elem)) {\n      return _scrollbar.scrollbarMap.get(elem);\n    }\n    return new _scrollbar.Scrollbar(elem, options);\n  };\n  /**\n   * Automatically init scrollbar on all elements base on the selector `[data-scrollbar]`\n   *\n   * @param options Initial options\n   */\n  SmoothScrollbar.initAll = function (options) {\n    return Array.from(document.querySelectorAll('[data-scrollbar]'), function (elem) {\n      return SmoothScrollbar.init(elem, options);\n    });\n  };\n  /**\n   * Check if there is a scrollbar on given element\n   *\n   * @param elem The DOM element that you want to check\n   */\n  SmoothScrollbar.has = function (elem) {\n    return _scrollbar.scrollbarMap.has(elem);\n  };\n  /**\n   * Gets scrollbar on the given element.\n   * If no scrollbar instance exsits, returns `undefined`\n   *\n   * @param elem The DOM element that you want to check.\n   */\n  SmoothScrollbar.get = function (elem) {\n    return _scrollbar.scrollbarMap.get(elem);\n  };\n  /**\n   * Returns an array that contains all scrollbar instances\n   */\n  SmoothScrollbar.getAll = function () {\n    return Array.from(_scrollbar.scrollbarMap.values());\n  };\n  /**\n   * Removes scrollbar on the given element\n   */\n  SmoothScrollbar.destroy = function (elem) {\n    var scrollbar = _scrollbar.scrollbarMap.get(elem);\n    if (scrollbar) {\n      scrollbar.destroy();\n    }\n  };\n  /**\n   * Removes all scrollbar instances from current document\n   */\n  SmoothScrollbar.destroyAll = function () {\n    _scrollbar.scrollbarMap.forEach(function (scrollbar) {\n      scrollbar.destroy();\n    });\n  };\n  /**\n   * Attaches plugins to scrollbars\n   *\n   * @param ...Plugins Scrollbar plugin classes\n   */\n  SmoothScrollbar.use = function () {\n    var Plugins = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      Plugins[_i] = arguments[_i];\n    }\n    return _plugin.addPlugins.apply(void 0, Plugins);\n  };\n  /**\n   * Attaches default style sheets to current document.\n   * You don't need to call this method manually unless\n   * you removed the default styles via `Scrollbar.detachStyle()`\n   */\n  SmoothScrollbar.attachStyle = function () {\n    return (0, _style.attachStyle)();\n  };\n  /**\n   * Removes default styles from current document.\n   * Use this method when you want to use your own css for scrollbars.\n   */\n  SmoothScrollbar.detachStyle = function () {\n    return (0, _style.detachStyle)();\n  };\n  SmoothScrollbar.version = \"8.7.4\";\n  SmoothScrollbar.ScrollbarPlugin = _plugin.ScrollbarPlugin;\n  return SmoothScrollbar;\n}(_scrollbar.Scrollbar);\nexports.default = SmoothScrollbar;\n//# sourceMappingURL=index.js.map"},"hash":"b7f79c2d90e9f81d8c583f1177320dbc"}