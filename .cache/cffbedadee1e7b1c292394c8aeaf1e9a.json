{"dependencies":[{"name":"./_baseTrim.js","loc":{"line":1,"column":21}},{"name":"./isObject.js","loc":{"line":2,"column":21}},{"name":"./isSymbol.js","loc":{"line":3,"column":21}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _baseTrim = require(\"./_baseTrim.js\");\n\nvar _baseTrim2 = _interopRequireDefault(_baseTrim);\n\nvar _isObject = require(\"./isObject.js\");\n\nvar _isObject2 = _interopRequireDefault(_isObject);\n\nvar _isSymbol = require(\"./isSymbol.js\");\n\nvar _isSymbol2 = _interopRequireDefault(_isSymbol);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if ((0, _isSymbol2.default)(value)) {\n    return NAN;\n  }\n  if ((0, _isObject2.default)(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = (0, _isObject2.default)(other) ? other + '' : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = (0, _baseTrim2.default)(value);\n  var isBinary = reIsBinary.test(value);\n  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n}\n\nexports.default = toNumber;"},"hash":"499de0daf56a4a7bfb5bebe91a8e1881"}