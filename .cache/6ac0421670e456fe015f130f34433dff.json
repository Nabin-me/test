{"dependencies":[{"name":"./thumb","loc":{"line":1,"column":31}},{"name":"../utils/","loc":{"line":2,"column":26}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScrollbarTrack = undefined;\n\nvar _thumb = require(\"./thumb\");\n\nvar _utils = require(\"../utils/\");\n\nvar ScrollbarTrack = /** @class */function () {\n  function ScrollbarTrack(direction, thumbMinSize) {\n    if (thumbMinSize === void 0) {\n      thumbMinSize = 0;\n    }\n    /**\n     * Track element\n     */\n    this.element = document.createElement('div');\n    this._isShown = false;\n    this.element.className = \"scrollbar-track scrollbar-track-\" + direction;\n    this.thumb = new _thumb.ScrollbarThumb(direction, thumbMinSize);\n    this.thumb.attachTo(this.element);\n  }\n  /**\n   * Attach to scrollbar container element\n   *\n   * @param scrollbarContainer Scrollbar container element\n   */\n  ScrollbarTrack.prototype.attachTo = function (scrollbarContainer) {\n    scrollbarContainer.appendChild(this.element);\n  };\n  /**\n   * Show track immediately\n   */\n  ScrollbarTrack.prototype.show = function () {\n    if (this._isShown) {\n      return;\n    }\n    this._isShown = true;\n    this.element.classList.add('show');\n  };\n  /**\n   * Hide track immediately\n   */\n  ScrollbarTrack.prototype.hide = function () {\n    if (!this._isShown) {\n      return;\n    }\n    this._isShown = false;\n    this.element.classList.remove('show');\n  };\n  ScrollbarTrack.prototype.update = function (scrollOffset, containerSize, pageSize) {\n    (0, _utils.setStyle)(this.element, {\n      display: pageSize <= containerSize ? 'none' : 'block'\n    });\n    this.thumb.update(scrollOffset, containerSize, pageSize);\n  };\n  return ScrollbarTrack;\n}();\nexports.ScrollbarTrack = ScrollbarTrack;\n//# sourceMappingURL=track.js.map"},"hash":"fd2d9736bda844d7f376c08609592c25"}