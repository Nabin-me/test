{"dependencies":[{"name":"lodash-es/clamp","loc":{"line":1,"column":18}},{"name":"../utils/","loc":{"line":2,"column":60}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mouseHandler = mouseHandler;\n\nvar _clamp = require(\"lodash-es/clamp\");\n\nvar _clamp2 = _interopRequireDefault(_clamp);\n\nvar _utils = require(\"../utils/\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Direction;\n(function (Direction) {\n  Direction[Direction[\"X\"] = 0] = \"X\";\n  Direction[Direction[\"Y\"] = 1] = \"Y\";\n})(Direction || (Direction = {}));\nfunction mouseHandler(scrollbar) {\n  var addEvent = (0, _utils.eventScope)(scrollbar);\n  var container = scrollbar.containerEl;\n  var _a = scrollbar.track,\n      xAxis = _a.xAxis,\n      yAxis = _a.yAxis;\n  function calcMomentum(direction, clickPosition) {\n    var size = scrollbar.size,\n        limit = scrollbar.limit,\n        offset = scrollbar.offset;\n    if (direction === Direction.X) {\n      var totalWidth = size.container.width + (xAxis.thumb.realSize - xAxis.thumb.displaySize);\n      return (0, _clamp2.default)(clickPosition / totalWidth * size.content.width, 0, limit.x) - offset.x;\n    }\n    if (direction === Direction.Y) {\n      var totalHeight = size.container.height + (yAxis.thumb.realSize - yAxis.thumb.displaySize);\n      return (0, _clamp2.default)(clickPosition / totalHeight * size.content.height, 0, limit.y) - offset.y;\n    }\n    return 0;\n  }\n  function getTrackDirection(elem) {\n    if ((0, _utils.isOneOf)(elem, [xAxis.element, xAxis.thumb.element])) {\n      return Direction.X;\n    }\n    if ((0, _utils.isOneOf)(elem, [yAxis.element, yAxis.thumb.element])) {\n      return Direction.Y;\n    }\n    return void 0;\n  }\n  var isMouseDown;\n  var isMouseMoving;\n  var startOffsetToThumb;\n  var trackDirection;\n  var containerRect;\n  addEvent(container, 'click', function (evt) {\n    if (isMouseMoving || !(0, _utils.isOneOf)(evt.target, [xAxis.element, yAxis.element])) {\n      return;\n    }\n    var track = evt.target;\n    var direction = getTrackDirection(track);\n    var rect = track.getBoundingClientRect();\n    var clickPos = (0, _utils.getPosition)(evt);\n    if (direction === Direction.X) {\n      var offsetOnTrack = clickPos.x - rect.left - xAxis.thumb.displaySize / 2;\n      scrollbar.setMomentum(calcMomentum(direction, offsetOnTrack), 0);\n    }\n    if (direction === Direction.Y) {\n      var offsetOnTrack = clickPos.y - rect.top - yAxis.thumb.displaySize / 2;\n      scrollbar.setMomentum(0, calcMomentum(direction, offsetOnTrack));\n    }\n  });\n  addEvent(container, 'mousedown', function (evt) {\n    if (!(0, _utils.isOneOf)(evt.target, [xAxis.thumb.element, yAxis.thumb.element])) {\n      return;\n    }\n    isMouseDown = true;\n    var thumb = evt.target;\n    var cursorPos = (0, _utils.getPosition)(evt);\n    var thumbRect = thumb.getBoundingClientRect();\n    trackDirection = getTrackDirection(thumb);\n    // pointer offset to thumb\n    startOffsetToThumb = {\n      x: cursorPos.x - thumbRect.left,\n      y: cursorPos.y - thumbRect.top\n    };\n    // container bounding rectangle\n    containerRect = container.getBoundingClientRect();\n    // prevent selection, see:\n    // https://github.com/idiotWu/smooth-scrollbar/issues/48\n    (0, _utils.setStyle)(scrollbar.containerEl, {\n      '-user-select': 'none'\n    });\n  });\n  addEvent(window, 'mousemove', function (evt) {\n    if (!isMouseDown) return;\n    isMouseMoving = true;\n    var cursorPos = (0, _utils.getPosition)(evt);\n    if (trackDirection === Direction.X) {\n      // get percentage of pointer position in track\n      // then tranform to px\n      // don't need easing\n      var offsetOnTrack = cursorPos.x - startOffsetToThumb.x - containerRect.left;\n      scrollbar.setMomentum(calcMomentum(trackDirection, offsetOnTrack), 0);\n    }\n    if (trackDirection === Direction.Y) {\n      var offsetOnTrack = cursorPos.y - startOffsetToThumb.y - containerRect.top;\n      scrollbar.setMomentum(0, calcMomentum(trackDirection, offsetOnTrack));\n    }\n  });\n  addEvent(window, 'mouseup blur', function () {\n    isMouseDown = isMouseMoving = false;\n    (0, _utils.setStyle)(scrollbar.containerEl, {\n      '-user-select': ''\n    });\n  });\n}\n//# sourceMappingURL=mouse.js.map"},"hash":"9aacdb3409fb3757c2e673ab037b6373"}