{"dependencies":[{"name":"../utils/","loc":{"line":1,"column":41}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.touchHandler = touchHandler;\n\nvar _utils = require(\"../utils/\");\n\nvar activeScrollbar;\nfunction touchHandler(scrollbar) {\n  var target = scrollbar.options.delegateTo || scrollbar.containerEl;\n  var touchRecord = new _utils.TouchRecord();\n  var addEvent = (0, _utils.eventScope)(scrollbar);\n  var damping;\n  var pointerCount = 0;\n  addEvent(target, 'touchstart', function (evt) {\n    // start records\n    touchRecord.track(evt);\n    // stop scrolling\n    scrollbar.setMomentum(0, 0);\n    // save damping\n    if (pointerCount === 0) {\n      damping = scrollbar.options.damping;\n      scrollbar.options.damping = Math.max(damping, 0.5); // less frames on touchmove\n    }\n    pointerCount++;\n  });\n  addEvent(target, 'touchmove', function (evt) {\n    if (activeScrollbar && activeScrollbar !== scrollbar) return;\n    touchRecord.update(evt);\n    var _a = touchRecord.getDelta(),\n        x = _a.x,\n        y = _a.y;\n    scrollbar.addTransformableMomentum(x, y, evt, function (willScroll) {\n      if (willScroll && evt.cancelable) {\n        evt.preventDefault();\n        activeScrollbar = scrollbar;\n      }\n    });\n  });\n  addEvent(target, 'touchcancel touchend', function (evt) {\n    var delta = touchRecord.getEasingDistance(damping);\n    scrollbar.addTransformableMomentum(delta.x, delta.y, evt);\n    pointerCount--;\n    // restore damping\n    if (pointerCount === 0) {\n      scrollbar.options.damping = damping;\n    }\n    touchRecord.release(evt);\n    activeScrollbar = null;\n  });\n}\n//# sourceMappingURL=touch.js.map"},"hash":"1f480641f07572e2bd257a3df94e414e"}