{"dependencies":[{"name":"./direction","loc":{"line":1,"column":31}},{"name":"../utils/","loc":{"line":2,"column":25}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScrollbarThumb = undefined;\n\nvar _direction2 = require(\"./direction\");\n\nvar _utils = require(\"../utils/\");\n\nvar ScrollbarThumb = /** @class */function () {\n  function ScrollbarThumb(_direction, _minSize) {\n    if (_minSize === void 0) {\n      _minSize = 0;\n    }\n    this._direction = _direction;\n    this._minSize = _minSize;\n    /**\n     * Thumb element\n     */\n    this.element = document.createElement('div');\n    /**\n     * Display size of the thumb\n     * will always be greater than `scrollbar.options.thumbMinSize`\n     */\n    this.displaySize = 0;\n    /**\n     * Actual size of the thumb\n     */\n    this.realSize = 0;\n    /**\n     * Thumb offset to the top\n     */\n    this.offset = 0;\n    this.element.className = \"scrollbar-thumb scrollbar-thumb-\" + _direction;\n  }\n  /**\n   * Attach to track element\n   *\n   * @param trackEl Track element\n   */\n  ScrollbarThumb.prototype.attachTo = function (trackEl) {\n    trackEl.appendChild(this.element);\n  };\n  ScrollbarThumb.prototype.update = function (scrollOffset, containerSize, pageSize) {\n    // calculate thumb size\n    // pageSize > containerSize -> scrollable\n    this.realSize = Math.min(containerSize / pageSize, 1) * containerSize;\n    this.displaySize = Math.max(this.realSize, this._minSize);\n    // calculate thumb offset\n    this.offset = scrollOffset / pageSize * (containerSize + (this.realSize - this.displaySize));\n    (0, _utils.setStyle)(this.element, this._getStyle());\n  };\n  ScrollbarThumb.prototype._getStyle = function () {\n    switch (this._direction) {\n      case _direction2.TrackDirection.X:\n        return {\n          width: this.displaySize + \"px\",\n          '-transform': \"translate3d(\" + this.offset + \"px, 0, 0)\"\n        };\n      case _direction2.TrackDirection.Y:\n        return {\n          height: this.displaySize + \"px\",\n          '-transform': \"translate3d(0, \" + this.offset + \"px, 0)\"\n        };\n      default:\n        return null;\n    }\n  };\n  return ScrollbarThumb;\n}();\nexports.ScrollbarThumb = ScrollbarThumb;\n//# sourceMappingURL=thumb.js.map"},"hash":"0a128575f618437130782e5b23b5af19"}