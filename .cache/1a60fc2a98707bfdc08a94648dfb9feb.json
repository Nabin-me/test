{"dependencies":[{"name":"tslib","loc":{"line":1,"column":27}},{"name":"./track","loc":{"line":2,"column":31}},{"name":"./direction","loc":{"line":3,"column":31}},{"name":"../decorators/","loc":{"line":4,"column":26}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TrackController = undefined;\n\nvar _tslib = require(\"tslib\");\n\nvar _track = require(\"./track\");\n\nvar _direction = require(\"./direction\");\n\nvar _decorators = require(\"../decorators/\");\n\nvar TrackController = /** @class */function () {\n  function TrackController(_scrollbar) {\n    this._scrollbar = _scrollbar;\n    var thumbMinSize = _scrollbar.options.thumbMinSize;\n    this.xAxis = new _track.ScrollbarTrack(_direction.TrackDirection.X, thumbMinSize);\n    this.yAxis = new _track.ScrollbarTrack(_direction.TrackDirection.Y, thumbMinSize);\n    this.xAxis.attachTo(_scrollbar.containerEl);\n    this.yAxis.attachTo(_scrollbar.containerEl);\n    if (_scrollbar.options.alwaysShowTracks) {\n      this.xAxis.show();\n      this.yAxis.show();\n    }\n  }\n  /**\n   * Updates track appearance\n   */\n  TrackController.prototype.update = function () {\n    var _a = this._scrollbar,\n        size = _a.size,\n        offset = _a.offset;\n    this.xAxis.update(offset.x, size.container.width, size.content.width);\n    this.yAxis.update(offset.y, size.container.height, size.content.height);\n  };\n  /**\n   * Automatically hide tracks when scrollbar is in idle state\n   */\n  TrackController.prototype.autoHideOnIdle = function () {\n    if (this._scrollbar.options.alwaysShowTracks) {\n      return;\n    }\n    this.xAxis.hide();\n    this.yAxis.hide();\n  };\n  (0, _tslib.__decorate)([(0, _decorators.debounce)(300)], TrackController.prototype, \"autoHideOnIdle\", null);\n  return TrackController;\n}();\nexports.TrackController = TrackController;\n//# sourceMappingURL=index.js.map"},"hash":"c2c50e1cc8cb301769b260c42369ab64"}